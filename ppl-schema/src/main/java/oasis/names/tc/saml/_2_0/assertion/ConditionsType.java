/*******************************************************************************
 * Copyright (c) 2013, SAP AG
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 *  
 *     - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *     - Neither the name of the SAP AG nor the names of its contributors may
 *      be used to endorse or promote products derived from this software 
 *      without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v3.0-03/04/2009 09:20 AM(valikov)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.03 at 09:58:45 AM CET 
//


package oasis.names.tc.saml._2_0.assertion;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.hyperjaxb3.item.ItemUtils;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDateTime;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for ConditionsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ConditionsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded" minOccurs="0">
 *         &lt;element ref="{urn:oasis:names:tc:SAML:2.0:assertion}Condition"/>
 *         &lt;element ref="{urn:oasis:names:tc:SAML:2.0:assertion}AudienceRestriction"/>
 *         &lt;element ref="{urn:oasis:names:tc:SAML:2.0:assertion}OneTimeUse"/>
 *         &lt;element ref="{urn:oasis:names:tc:SAML:2.0:assertion}ProxyRestriction"/>
 *       &lt;/choice>
 *       &lt;attribute name="NotBefore" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="NotOnOrAfter" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConditionsType", propOrder = {
    "conditionOrAudienceRestrictionOrOneTimeUse"
})
@Entity(name = "oasis.names.tc.saml._2_0.assertion.ConditionsType")
@Table(name = "CONDITIONSTYPE")
@Inheritance(strategy = InheritanceType.JOINED)
public class ConditionsType
    implements Serializable, Equals, HashCode, ToString
{

    @XmlElements({
        @XmlElement(name = "Condition"),
        @XmlElement(name = "ProxyRestriction", type = ProxyRestrictionType.class),
        @XmlElement(name = "AudienceRestriction", type = AudienceRestrictionType.class),
        @XmlElement(name = "OneTimeUse", type = OneTimeUseType.class)
    })
    protected List<ConditionAbstractType> conditionOrAudienceRestrictionOrOneTimeUse;
    @XmlAttribute(name = "NotBefore")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar notBefore;
    @XmlAttribute(name = "NotOnOrAfter")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar notOnOrAfter;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;
    protected transient List<ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem> conditionOrAudienceRestrictionOrOneTimeUseItems;

    /**
     * Gets the value of the conditionOrAudienceRestrictionOrOneTimeUse property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conditionOrAudienceRestrictionOrOneTimeUse property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConditionOrAudienceRestrictionOrOneTimeUse().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConditionAbstractType }
     * {@link ProxyRestrictionType }
     * {@link AudienceRestrictionType }
     * {@link OneTimeUseType }
     * 
     * 
     */
    @Transient
    public List<ConditionAbstractType> getConditionOrAudienceRestrictionOrOneTimeUse() {
        if (conditionOrAudienceRestrictionOrOneTimeUse == null) {
            conditionOrAudienceRestrictionOrOneTimeUse = new ArrayList<ConditionAbstractType>();
        }
        return this.conditionOrAudienceRestrictionOrOneTimeUse;
    }

    /**
     * 
     * 
     */
    public void setConditionOrAudienceRestrictionOrOneTimeUse(List<ConditionAbstractType> conditionOrAudienceRestrictionOrOneTimeUse) {
        this.conditionOrAudienceRestrictionOrOneTimeUse = conditionOrAudienceRestrictionOrOneTimeUse;
    }

    /**
     * Gets the value of the notBefore property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getNotBefore() {
        return notBefore;
    }

    /**
     * Sets the value of the notBefore property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setNotBefore(XMLGregorianCalendar value) {
        this.notBefore = value;
    }

    /**
     * Gets the value of the notOnOrAfter property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getNotOnOrAfter() {
        return notOnOrAfter;
    }

    /**
     * Sets the value of the notOnOrAfter property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setNotOnOrAfter(XMLGregorianCalendar value) {
        this.notOnOrAfter = value;
    }

    /**
     * Gets the value of the hjid property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * Sets the value of the hjid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }

    @OneToMany(targetEntity = ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONDITIONORAUDIENCERESTRICTI_1")
    public List<ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem> getConditionOrAudienceRestrictionOrOneTimeUseItems() {
        if (this.conditionOrAudienceRestrictionOrOneTimeUseItems == null) {
            this.conditionOrAudienceRestrictionOrOneTimeUseItems = new ArrayList<ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem>();
        }
        if (ItemUtils.shouldBeWrapped(this.conditionOrAudienceRestrictionOrOneTimeUse)) {
            this.conditionOrAudienceRestrictionOrOneTimeUse = ItemUtils.wrap(this.conditionOrAudienceRestrictionOrOneTimeUse, this.conditionOrAudienceRestrictionOrOneTimeUseItems, ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem.class);
        }
        return this.conditionOrAudienceRestrictionOrOneTimeUseItems;
    }

    public void setConditionOrAudienceRestrictionOrOneTimeUseItems(List<ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem> value) {
        this.conditionOrAudienceRestrictionOrOneTimeUse = null;
        this.conditionOrAudienceRestrictionOrOneTimeUseItems = null;
        this.conditionOrAudienceRestrictionOrOneTimeUseItems = value;
        if (this.conditionOrAudienceRestrictionOrOneTimeUseItems == null) {
            this.conditionOrAudienceRestrictionOrOneTimeUseItems = new ArrayList<ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem>();
        }
        if (ItemUtils.shouldBeWrapped(this.conditionOrAudienceRestrictionOrOneTimeUse)) {
            this.conditionOrAudienceRestrictionOrOneTimeUse = ItemUtils.wrap(this.conditionOrAudienceRestrictionOrOneTimeUse, this.conditionOrAudienceRestrictionOrOneTimeUseItems, ConditionsTypeConditionOrAudienceRestrictionOrOneTimeUseItem.class);
        }
    }

    @Basic
    @Column(name = "NOTBEFOREITEM")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getNotBeforeItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getNotBefore());
    }

    public void setNotBeforeItem(Date target) {
        setNotBefore(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDateTime.class, target));
    }

    @Basic
    @Column(name = "NOTONORAFTERITEM")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getNotOnOrAfterItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getNotOnOrAfter());
    }

    public void setNotOnOrAfterItem(Date target) {
        setNotOnOrAfter(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDateTime.class, target));
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof ConditionsType)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        final ConditionsType that = ((ConditionsType) object);
        equalsBuilder.append(this.getConditionOrAudienceRestrictionOrOneTimeUse(), that.getConditionOrAudienceRestrictionOrOneTimeUse());
        equalsBuilder.append(this.getNotBefore(), that.getNotBefore());
        equalsBuilder.append(this.getNotOnOrAfter(), that.getNotOnOrAfter());
    }

    public boolean equals(Object object) {
        if (!(object instanceof ConditionsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        hashCodeBuilder.append(this.getConditionOrAudienceRestrictionOrOneTimeUse());
        hashCodeBuilder.append(this.getNotBefore());
        hashCodeBuilder.append(this.getNotOnOrAfter());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public void toString(ToStringBuilder toStringBuilder) {
        {
            List<ConditionAbstractType> theConditionOrAudienceRestrictionOrOneTimeUse;
            theConditionOrAudienceRestrictionOrOneTimeUse = this.getConditionOrAudienceRestrictionOrOneTimeUse();
            toStringBuilder.append("conditionOrAudienceRestrictionOrOneTimeUse", theConditionOrAudienceRestrictionOrOneTimeUse);
        }
        {
            XMLGregorianCalendar theNotBefore;
            theNotBefore = this.getNotBefore();
            toStringBuilder.append("notBefore", theNotBefore);
        }
        {
            XMLGregorianCalendar theNotOnOrAfter;
            theNotOnOrAfter = this.getNotOnOrAfter();
            toStringBuilder.append("notOnOrAfter", theNotOnOrAfter);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }

}
