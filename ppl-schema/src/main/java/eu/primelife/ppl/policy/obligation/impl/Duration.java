/*******************************************************************************
 * Copyright (c) 2013, SAP AG
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 *  
 *     - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *     - Neither the name of the SAP AG nor the names of its contributors may
 *      be used to endorse or promote products derived from this software 
 *      without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v3.0-03/04/2009 09:20 AM(valikov)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.03 at 09:58:45 AM CET 
//


package eu.primelife.ppl.policy.obligation.impl;

import java.io.Serializable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for Duration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Duration">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Duration" type="{http://www.w3.org/2001/XMLSchema}duration"/>
 *       &lt;/sequence>
 *       &lt;attribute name="matching" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" />
 *       &lt;attribute name="mismatchId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="elementId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Duration", propOrder = {
    "duration"
})
@Entity(name = "eu.primelife.ppl.policy.obligation.impl.Duration")
@Table(name = "DURATION")
@Inheritance(strategy = InheritanceType.JOINED)
public class Duration
    implements Serializable, Equals, HashCode, ToString
{

    @XmlElement(name = "Duration", required = true)
    protected String duration;
    @XmlAttribute
    protected Boolean matching;
    @XmlAttribute
    protected String mismatchId;
    @XmlAttribute
    protected String elementId;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;

    
   @Basic
    @Column(name = "DURATION")
    public String getDuration() {
        return duration;
    }
    public void setDuration(String value) {
        this.duration = value;
    }


    /**
     * Gets the value of the matching property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @Basic
    @Column(name = "MATCHING")
    public boolean isMatching() {
        if (matching == null) {
            return true;
        } else {
            return matching;
        }
    }

    /**
     * Sets the value of the matching property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMatching(Boolean value) {
        this.matching = value;
    }

    /**
     * Gets the value of the mismatchId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MISMATCHID", length = 255)
    public String getMismatchId() {
        return mismatchId;
    }

    /**
     * Sets the value of the mismatchId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMismatchId(String value) {
        this.mismatchId = value;
    }

    /**
     * Gets the value of the elementId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "ELEMENTID", length = 255)
    public String getElementId() {
        return elementId;
    }

    /**
     * Sets the value of the elementId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setElementId(String value) {
        this.elementId = value;
    }

    /**
     * Gets the value of the hjid property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    /**
     * Sets the value of the hjid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHjid(Long value) {
        this.hjid = value;
    }


    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof Duration)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        final Duration that = ((Duration) object);
        equalsBuilder.append(this.getDuration(), that.getDuration());
        equalsBuilder.append(this.isMatching(), that.isMatching());
        equalsBuilder.append(this.getMismatchId(), that.getMismatchId());
        equalsBuilder.append(this.getElementId(), that.getElementId());
    }

    public boolean equals(Object object) {
        if (!(object instanceof Duration)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        hashCodeBuilder.append(this.getDuration());
        hashCodeBuilder.append(this.isMatching());
        hashCodeBuilder.append(this.getMismatchId());
        hashCodeBuilder.append(this.getElementId());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public void toString(ToStringBuilder toStringBuilder) {
        {
            String theDuration;
            theDuration = this.getDuration();
            toStringBuilder.append("duration", theDuration);
        }
        {
            Boolean theMatching;
            theMatching = this.isMatching();
            toStringBuilder.append("matching", theMatching);
        }
        {
            String theMismatchId;
            theMismatchId = this.getMismatchId();
            toStringBuilder.append("mismatchId", theMismatchId);
        }
        {
            String theElementId;
            theElementId = this.getElementId();
            toStringBuilder.append("elementId", theElementId);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }
    
    @Transient
    public long getInSecond(){
    	Pattern pattern;
		Matcher matcher;
		long y=0, mo=0, d=0, h=0, mi=0, s=0;

		String part1 = null;
		String part2 = null;
		
		pattern = Pattern.compile("P(\\d+Y{0,1}\\d+M{0,1}\\d+D{0,1}){0,1}(T\\d+H{0,1}\\d+M{0,1}\\d+S{0,1})");
    	matcher = pattern.matcher(duration);
    	
    	if(matcher.matches()){
    		part1 = matcher.group(1);
    		part2 = matcher.group(2);
    	}
    	
    	if(part1 != null){
			pattern = Pattern.compile("(?:(\\d+)Y){0,1}(?:(\\d+)M){0,1}(?:(\\d+)D){0,1}");
	    	matcher = pattern.matcher(part1);
	    	
	    	if(matcher.matches()){
	    		if(matcher.group(1) != null){
	    			y = Long.parseLong(matcher.group(1));
	    		}
	    		if(matcher.group(2) != null){
	    			mo = Long.parseLong(matcher.group(2));
	    		}
	    		if(matcher.group(1) != null){
	    			d = Long.parseLong(matcher.group(3));
	    		}
	    	}
    	}
    	
    	if(part2 != null){
    		pattern = Pattern.compile("T(?:(\\d+)H){0,1}(?:(\\d+)M){0,1}(?:(\\d+)S){0,1}");
    		matcher = pattern.matcher(part2);
    		
    		if(matcher.matches()){
    			if(matcher.group(1) != null){
    				h = Long.parseLong(matcher.group(1));
    			}
    			if(matcher.group(2) != null){
    				mi = Long.parseLong(matcher.group(2));
    			}
    			if(matcher.group(1) != null){
    				s = Long.parseLong(matcher.group(3));
    			}
    		}
    	}
    	
    	return (Long)(s + 60 * mi + 3600 * h + d * 86400 + mo * 3600 * 24 * 30 + y * 3600 * 24 * 30 * 12); 
	}
}
